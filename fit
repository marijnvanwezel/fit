#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * This file is part of Fit.
 *
 * (c) Marijn van Wezel <marijnvanwezel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

// Some constants used for compatibility checks
const REQUIRED_PHP_VERSION = '8.1.0';
const REQUIRED_EXTENSIONS = [];
const COMPOSER_AUTOLOADER_PATH_CANDIDATES = [
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php'
];

try {
	exit(main());
} catch (Throwable $throwable) {
	fwrite(STDERR, $throwable->getMessage() . PHP_EOL);
} finally {
	// If all else fails, exit with an error code.
	exit(1);
}

/**
 * Runs the main application.
 *
 * @throws Exception
 */
function main(): int {
    if (!version_compare(PHP_VERSION, PHP_VERSION, '=')) {
        $errorMessage = 'Your PHP runtime declares an invalid value for PHP_VERSION.' . PHP_EOL .
            'This breaks certain functionality such as "version_compare()".' . PHP_EOL .
            'Please use a different PHP interpreter.';

        throw new Exception($errorMessage);
    }

	// Make sure the PHP interpreter is at least on version REQUIRED_PHP_VERSION
	if (version_compare(REQUIRED_PHP_VERSION, PHP_VERSION, '>')) {
		$errorMessage = sprintf(
			'This version of Fit requires PHP >= ' . REQUIRED_PHP_VERSION . '.' . PHP_EOL .
			'You are using PHP %s (%s).',
			PHP_VERSION,
			PHP_BINARY
		);

		throw new Exception($errorMessage);
	}

    // Make sure all extensions in REQUIRED_EXTENSIONS are loaded
	foreach (REQUIRED_EXTENSIONS as $extension) {
		if (extension_loaded($extension)) {
			continue;
		}

		$errorMessage = sprintf('Fit requires the "%s" extension.', $extension);

        throw new Exception($errorMessage);
	}

    // Retrieve the path to the Composer autoloader
	if (getenv('COMPOSER_AUTOLOADER_PATH') !== false) {
		$path = getenv('COMPOSER_AUTOLOADER_PATH');

		if (!file_exists($path)) {
			$errorMessage = 'The autoloader path specified through the "COMPOSER_AUTOLOADER_PATH" environment ' .
				'variable does not exist.';

			throw new Exception($errorMessage);
		} elseif (!is_readable($path)) {
			$errorMessage = 'The autoloader path specified through the "COMPOSER_AUTOLOADER_PATH" environment ' .
				'variable is not readable. Make sure that you have sufficient permissions.';

			throw new Exception($errorMessage);
		} else {
			define('COMPOSER_AUTOLOADER_PATH', $path);
		}
	} elseif (isset($GLOBALS['_composer_autoload_path'])) {
		// See https://getcomposer.org/doc/articles/vendor-binaries.md#finding-the-composer-autoloader-from-a-binary
		define('COMPOSER_AUTOLOADER_PATH', $GLOBALS['_composer_autoload_path']);
	} else {
		// Try some plausible paths for the autoloader
		foreach (COMPOSER_AUTOLOADER_PATH_CANDIDATES as $path) {
			if (is_readable($path)) {
				define('COMPOSER_AUTOLOADER_PATH', $path);
				break;
			}
		}
	}

	if (!defined('COMPOSER_AUTOLOADER_PATH')) {
		$errorMessage = 'You need to set up your project\'s dependencies using Composer:' . PHP_EOL . PHP_EOL .
			'    composer install' . PHP_EOL . PHP_EOL .
			'You can learn more about Composer on https://getcomposer.org/.';

		throw new Exception($errorMessage);
	}

	require COMPOSER_AUTOLOADER_PATH;

	return Fit\UI\Console\ConsoleApplication::main();
}
